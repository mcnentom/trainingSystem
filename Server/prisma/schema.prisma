generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  user_id        Int             @id @default(autoincrement())
  username       String
  email          String          @unique
  password       String
  profile_image  String
  taught_courses Course[]
  certifications Certification[]
  enrolledCourses EnrolledCourse[]
}

model Admin {
  admin_id Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String
}

model Course {
  course_id       Int            @id @default(autoincrement())
  course_name     String
  instructor      User           @relation(fields: [instructor_id], references: [user_id])
  instructor_id   Int
  duration        Int            // Duration in days, weeks, etc.
  materialBatches MaterialBatch[]
  progress        Float          @default(0) // Progress percentage (0-100)
  certifications  Certification[]
  assessments     Assessment[]
  enrolledCourses EnrolledCourse[]
}

model EnrolledCourse {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [user_id], references: [user_id])
  user_id        Int
  course         Course    @relation(fields: [course_id], references: [course_id])
  course_id      Int
  enrollmentDate DateTime  @default(now())
  score          Float     @default(0)
}

model MaterialBatch {
  batch_id      Int     @id @default(autoincrement())
  course        Course  @relation(fields: [course_id], references: [course_id])
  course_id     Int
  batch_number  Int     // Batch number (1-5)
  material_types String @db.Text
}

model Message {
  id      Int      @id @default(autoincrement())
  room    String
  author  String
  message String
  time    DateTime @default(now())
}

model Assessment {
  id            Int     @id @default(autoincrement())
  question      String
  choices       String
  correctChoice Int     // Index of the correct choice in the 'choices' array
  course        Course  @relation(fields: [course_id], references: [course_id])
  course_id     Int
}

model Certification {
  certification_id Int       @id @default(autoincrement())
  user             User      @relation(fields: [user_id], references: [user_id])
  user_id          Int
  course           Course    @relation(fields: [course_id], references: [course_id])
  course_id        Int
  date_achieved    DateTime  // Date when the certification was achieved
}

