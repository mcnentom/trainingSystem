datasource db {
  provider = "mysql"
  url           = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
}
// User model to represent users
model User {
  user_id           Int          @id @default(autoincrement())
  username          String
  email             String       @unique
  password          String
  profile_image     String
  taught_courses Course[]
  certification   Certification[]
}
model Admin {
  admin_id      Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
 
  
}

// Course model to represent courses
model Course {
  course_id         Int              @id @default(autoincrement())
  course_name       String           
  instructor        User             @relation(fields: [instructor_id], references: [user_id])
  instructor_id     Int
  duration          Int              // Duration in days, weeks, etc.
  materialBatches   MaterialBatch[]
  progress          Float            @default(0) // Progress percentage (0-100)
  certification     Certification[]
}

model MaterialBatch {
  batch_id        Int            @id @default(autoincrement())
  course          Course         @relation(fields: [course_id], references: [course_id])
  course_id       Int
  batch_number    Int            // Batch number (1-5)
  material_types  String         @db.Text
}

// UserAssessment model to represent user assessments (e.g., quizzes, exams)
model User_Assessment {
  assessment_id     Int          @id @default(autoincrement())
  assessment_type   String       // Type of assessment
  score             Float        // Score obtained by the user
}
// Certification model to represent user certifications
model Certification {
  certification_id  Int          @id @default(autoincrement())
  user              User         @relation(fields: [user_id], references: [user_id])
  user_id           Int
  course            Course       @relation(fields: [course_id], references: [course_id])
  course_id         Int
  date_achieved     DateTime     // Date when the certification was achieved
}

